"use strict";exports.id=73,exports.ids=[73],exports.modules={73:(a,b,c)=>{c.d(b,{ho:()=>e}),c(95861);var d=c(7271);async function e(a){let b=new d.W(a);return await b.open(),b}},2887:(a,b,c)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.migrate=b.readMigrations=void 0;let d=c(29021),e=c(33873);async function f(a){let b=a||e.join(process.cwd(),"migrations"),c=e.resolve(b),f=await new Promise((a,b)=>{d.readdir(c,(c,d)=>{if(c)return b(c);a(d.map(a=>a.match(/^(\d+).(.*?)\.sql$/)).filter(a=>null!==a).map(a=>({id:Number(a[1]),name:a[2],filename:a[0]})).sort((a,b)=>Math.sign(a.id-b.id)))})});if(!f.length)throw Error(`No migration files found in '${c}'.`);return Promise.all(f.map(a=>new Promise((b,f)=>{let g=e.join(c,a.filename);d.readFile(g,"utf-8",(c,d)=>{if(c)return f(c);let[e,g]=d.split(/^--\s+?down\b/im);a.up=e.replace(/^-- .*?$/gm,"").trim(),a.down=g?g.trim():"",b(a)})})))}b.readMigrations=f,b.migrate=async function(a,b={}){b.force=b.force||!1,b.table=b.table||"migrations";let{force:c,table:d}=b,e=b.migrations?b.migrations:await f(b.migrationsPath);await a.run(`CREATE TABLE IF NOT EXISTS "${d}" (
  id   INTEGER PRIMARY KEY,
  name TEXT    NOT NULL,
  up   TEXT    NOT NULL,
  down TEXT    NOT NULL
)`);let g=await a.all(`SELECT id, name, up, down FROM "${d}" ORDER BY id ASC`),h=e[e.length-1];for(let b of g.slice().sort((a,b)=>Math.sign(b.id-a.id)))if(!e.some(a=>a.id===b.id)||c&&b.id===h.id){await a.run("BEGIN");try{await a.exec(b.down),await a.run(`DELETE FROM "${d}" WHERE id = ?`,b.id),await a.run("COMMIT"),g=g.filter(a=>a.id!==b.id)}catch(b){throw await a.run("ROLLBACK"),b}}else break;let i=g.length?g[g.length-1].id:0;for(let b of e)if(b.id>i){await a.run("BEGIN");try{await a.exec(b.up),await a.run(`INSERT INTO "${d}" (id, name, up, down) VALUES (?, ?, ?, ?)`,b.id,b.name,b.up,b.down),await a.run("COMMIT")}catch(b){throw await a.run("ROLLBACK"),b}}}},7271:(a,b,c)=>{b.W=void 0;let d=c(95861),e=c(2887),f=c(13152),g=c(80780);class h{constructor(a){this.config=a,this.db=null}on(a,b){this.db.on(a,b)}getDatabaseInstance(){return this.db}open(){return new Promise((a,b)=>{let{filename:c,mode:d,driver:e}=this.config;if(null==c)throw Error("sqlite: filename cannot be null / undefined");if(!e)throw Error("sqlite: driver is not defined");d?this.db=new e(c,d,c=>{if(c)return b((0,g.formatError)(c));a()}):this.db=new e(c,c=>{if(c)return b((0,g.formatError)(c));a()})})}close(){return new Promise((a,b)=>{this.db.close(c=>{if(c)return b((0,g.formatError)(c));a()})})}configure(a,b){this.db.configure(a,b)}run(a,...b){return new Promise((c,e)=>{let h=(0,f.toSqlParams)(a,b);this.db.run(h.sql,...h.params,function(a){if(a)return e((0,g.formatError)(a));c({stmt:new d.Statement(this.stmt),lastID:this.lastID,changes:this.changes})})})}get(a,...b){return new Promise((c,d)=>{let e=(0,f.toSqlParams)(a,b);this.db.get(e.sql,...e.params,(a,b)=>{if(a)return d((0,g.formatError)(a));c(b)})})}each(a,...b){return new Promise((c,d)=>{let e=b.pop();if(!e||"function"!=typeof e)throw Error("sqlite: Last param of Database#each() must be a callback function");if(b.length>0){let a=b.pop();if("function"==typeof a)throw Error("sqlite: Database#each() should only have a single callback defined. See readme for usage.");b.push(a)}let h=(0,f.toSqlParams)(a,b);this.db.each(h.sql,...h.params,(a,b)=>{if(a)return e((0,g.formatError)(a),null);e(null,b)},(a,b)=>{if(a)return d((0,g.formatError)(a));c(b)})})}all(a,...b){return new Promise((c,d)=>{let e=(0,f.toSqlParams)(a,b);this.db.all(e.sql,...e.params,(a,b)=>{if(a)return d((0,g.formatError)(a));c(b)})})}exec(a){return new Promise((b,c)=>{let d=(0,f.toSqlParams)(a);this.db.exec(d.sql,a=>{if(a)return c((0,g.formatError)(a));b()})})}prepare(a,...b){return new Promise((c,e)=>{let g=(0,f.toSqlParams)(a,b),h=this.db.prepare(g.sql,...g.params,a=>{if(a)return e(a);c(new d.Statement(h))})})}loadExtension(a){return new Promise((b,c)=>{this.db.loadExtension(a,a=>{if(a)return c((0,g.formatError)(a));b()})})}async migrate(a){await (0,e.migrate)(this,a)}serialize(){throw Error("sqlite: Currently not implemented. Use getDatabaseInstance().serialize() instead.")}parallelize(){throw Error("sqlite: Currently not implemented. Use getDatabaseInstance().parallelize() instead.")}}b.W=h},13152:(a,b)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.toSqlParams=void 0,b.toSqlParams=function(a,b=[]){return"string"==typeof a?{sql:a,params:b}:{sql:a.sql,params:a.values}}},80780:(a,b)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.formatError=void 0,b.formatError=function(a){if(a instanceof Error)return a;if("object"==typeof a){let b=Error();for(let c in a)b[c]=a[c];return a.message&&(b.message=a.message),b}return Error(a)}},95861:(a,b,c)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.Statement=void 0;let d=c(80780);class e{constructor(a){this.stmt=a}getStatementInstance(){return this.stmt}bind(...a){return new Promise((b,c)=>{this.stmt.bind(...a,a=>{if(a)return c((0,d.formatError)(a));b()})})}reset(){return new Promise(a=>{this.stmt.reset(()=>{a()})})}finalize(){return new Promise((a,b)=>{this.stmt.finalize(c=>{if(c)return b((0,d.formatError)(c));a()})})}run(...a){return new Promise((b,c)=>{let e=this;this.stmt.run(...a,function(a){if(a)return c((0,d.formatError)(a));b({stmt:e,lastID:this.lastID,changes:this.changes})})})}get(...a){return new Promise((b,c)=>{this.stmt.get(...a,(a,e)=>{if(a)return c((0,d.formatError)(a));b(e)})})}all(...a){return new Promise((b,c)=>{this.stmt.all(...a,(a,e)=>{if(a)return c((0,d.formatError)(a));b(e)})})}each(...a){return new Promise((b,c)=>{let e=a.pop();if(!e||"function"!=typeof e)throw Error("sqlite: Last param of Statement#each() must be a callback function");if(a.length>0){let b=a.pop();if("function"==typeof b)throw Error("sqlite: Statement#each() should only have a single callback defined. See readme for usage.");a.push(b)}this.stmt.each(...a,(a,b)=>{if(a)return e((0,d.formatError)(a),null);e(null,b)},(a,e)=>{if(a)return c((0,d.formatError)(a));b(e)})})}}b.Statement=e}};