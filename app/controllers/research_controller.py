"""
Research Controller
Handles business logic for legal research requests.
"""
from datetime import datetime
from typing import Dict, Any, List
import uuid
import httpx

from app.schemas.query_schema import ResearchRequest, ResearchResponse
from app.core.config import settings
from app.core.logger import logger


class ResearchController:
    """Controller for legal research operations."""
    
    @staticmethod
    async def perform_research(
        request: ResearchRequest,
        user_id: int
    ) -> ResearchResponse:
        """
        Perform legal research based on the query.
        
        Args:
            request: Research request data
            user_id: ID of the user making the request
            
        Returns:
            ResearchResponse with research results
        """
        request_id = str(uuid.uuid4())
        
        logger.info(f"Performing legal research {request_id} for user {user_id}")
        logger.info(f"Query: {request.query}")
        
        # Prepare data for AI engine
        ai_request_data = {
            "request_id": request_id,
            "user_id": user_id,
            "query": request.query,
            "jurisdiction": request.jurisdiction,
            "practice_area": request.practice_area,
            "date_from": request.date_from.isoformat() if request.date_from else None,
            "date_to": request.date_to.isoformat() if request.date_to else None,
            "include_cases": request.include_cases,
            "include_statutes": request.include_statutes,
            "max_results": request.max_results,
        }
        
        # Call AI engine for intelligent research
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                # Call AI engine inference endpoint
                ai_response = await client.post(
                    f"{settings.AI_ENGINE_URL}/inference",
                    json={
                        "query": request.query,
                        "context": f"Legal research query in {request.jurisdiction or 'India'}. Practice area: {request.practice_area or 'General law'}. Include cases: {request.include_cases}, Include statutes: {request.include_statutes}",
                        "max_tokens": 800,
                        "temperature": 0.7
                    },
                    headers={"Content-Type": "application/json"}
                )
                
                if ai_response.status_code == 200:
                    ai_result = ai_response.json()
                    ai_answer = ai_result.get("response", ai_result.get("answer", ""))
                    ai_provider = ai_result.get("provider", "AI Engine")
                    ai_model = ai_result.get("model", "Unknown")
                    
                    logger.info(f"AI research completed using {ai_provider} ({ai_model})")
                    
                    # Process AI response into structured results
                    results = [
                        {
                            "title": f"AI Legal Analysis - {ai_provider}",
                            "citation": f"Generated by {ai_model}",
                            "court": "AI Legal Research Engine",
                            "relevance_score": 0.95,
                            "snippet": ai_answer,
                            "ai_provider": ai_provider,
                            "ai_model": ai_model,
                            "ai_confidence": ai_result.get("confidence", 0.9)
                        }
                    ]
                    
                    # Add additional context if available
                    if request.include_cases:
                        results.append({
                            "title": "Case Law Context",
                            "citation": "AI-Generated Case References",
                            "court": "Legal Database",
                            "relevance_score": 0.85,
                            "snippet": f"Based on {request.jurisdiction or 'Indian'} case law and legal precedents relevant to: {request.query}",
                            "ai_provider": ai_provider,
                            "ai_model": ai_model
                        })
                    
                    if request.include_statutes:
                        results.append({
                            "title": "Statutory Analysis",
                            "citation": "AI-Generated Statute References",
                            "court": "Legal Database",
                            "relevance_score": 0.88,
                            "snippet": f"Relevant statutory provisions and legal frameworks for: {request.query}",
                            "ai_provider": ai_provider,
                            "ai_model": ai_model
                        })
                    
                else:
                    logger.warning(f"AI engine returned status {ai_response.status_code}")
                    # Fallback to basic results
                    results = [
                        {
                            "title": "Legal Research Result",
                            "citation": "AI Engine Fallback",
                            "court": "Legal Research System",
                            "relevance_score": 0.80,
                            "snippet": f"Research query: {request.query}. Jurisdiction: {request.jurisdiction or 'India'}. Practice area: {request.practice_area or 'General law'}",
                            "ai_provider": "Fallback",
                            "ai_model": "Basic"
                        }
                    ]
                    
        except Exception as e:
            logger.error(f"AI engine call failed: {str(e)}")
            # Fallback response
            results = [
                {
                    "title": "Legal Research Result",
                    "citation": "System Generated",
                    "court": "Legal Research System",
                    "relevance_score": 0.75,
                    "snippet": f"Research query: {request.query}. Jurisdiction: {request.jurisdiction or 'India'}. Practice area: {request.practice_area or 'General law'}. Note: AI engine temporarily unavailable.",
                    "ai_provider": "System",
                    "ai_model": "Fallback"
                }
            ]
        
        # Generate summary based on AI results
        if results and results[0].get("ai_provider") != "System":
            summary = f"Research completed using {results[0].get('ai_provider', 'AI')} ({results[0].get('ai_model', 'Unknown')}). Found {len(results)} relevant results."
        else:
            summary = f"Research completed. Found {len(results)} results. Query: {request.query}"
        
        return ResearchResponse(
            request_id=request_id,
            query=request.query,
            results=results,
            total_results=len(results),
            summary=summary,
            created_at=datetime.utcnow()
        )
    
    @staticmethod
    async def get_research_history(user_id: int, limit: int = 10) -> List[Dict[str, Any]]:
        """
        Get research history for a user.
        
        Args:
            user_id: ID of the user
            limit: Maximum number of records to return
            
        Returns:
            List of research history records
        """
        logger.info(f"Fetching research history for user {user_id}")
        
        # TODO: Fetch from database
        # This is a placeholder implementation
        return []

