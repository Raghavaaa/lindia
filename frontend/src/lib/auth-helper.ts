/**
 * Authentication Helper for Frontend
 * Manages JWT tokens and provides easy access to auth functionality
 */

import { setAuthToken, getAuthToken, clearAuthToken } from './config';

/**
 * Check if user is authenticated
 */
export const isAuthenticated = (): boolean => {
  return getAuthToken() !== null;
};

/**
 * Login with JWT token
 * Call this after successful authentication
 * 
 * @param token - JWT token from backend
 * @example
 * ```typescript
 * // After successful login
 * const token = await loginUser(credentials);
 * loginWithToken(token);
 * ```
 */
export const loginWithToken = (token: string): void => {
  setAuthToken(token);
};

/**
 * Logout and clear authentication
 */
export const logout = (): void => {
  clearAuthToken();
  // Optionally redirect to login page
  if (typeof window !== 'undefined') {
    window.location.href = '/login';
  }
};

/**
 * Get current authentication token
 */
export const getCurrentToken = (): string | null => {
  return getAuthToken();
};

/**
 * Set a test token for development
 * 
 * @param userId - User ID for test token (default: "test_user_123")
 * @example
 * ```typescript
 * // For development/testing only
 * setTestToken("test_user_123");
 * ```
 */
export const setTestToken = (userId: string = "test_user_123"): void => {
  // This should match a token generated by your backend
  // Run: python3 generate_token.py
  // Or use the test token from backend
  
  console.warn('⚠️  Using test token - only for development!');
  console.log(`Generate a real token: python3 generate_token.py ${userId}`);
  
  // You need to paste the actual token here from generate_token.py
  // Example:
  const testToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0X3VzZXJfMTIzIiwidXNlcl9pZCI6InRlc3RfdXNlcl8xMjMiLCJpYXQiOjE3NjA3MDAzNzMsImVtYWlsIjoidGVzdF91c2VyXzEyM0B0ZXN0LmNvbSIsInRlc3QiOnRydWUsImV4cCI6MTc2MzI5MjM3M30.6wK4MwuStfmm4ZKlBhHGBvyNQCdqqAg3wioJc3WmCpI";
  
  setAuthToken(testToken);
  console.log('✅ Test token set! You can now make authenticated requests.');
};

/**
 * Check if token is expired (basic check)
 * Note: This doesn't verify signature, just checks expiry
 */
export const isTokenExpired = (): boolean => {
  const token = getAuthToken();
  
  if (!token) return true;
  
  try {
    // Decode JWT (not verifying, just parsing)
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const payload = JSON.parse(window.atob(base64));
    
    // Check expiry
    if (payload.exp) {
      const now = Math.floor(Date.now() / 1000);
      return payload.exp < now;
    }
    
    return false;
  } catch (error) {
    console.error('Error checking token expiry:', error);
    return true;
  }
};

/**
 * Get user info from token (without verification)
 */
export const getUserFromToken = (): { userId?: string; email?: string } | null => {
  const token = getAuthToken();
  
  if (!token) return null;
  
  try {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const payload = JSON.parse(window.atob(base64));
    
    return {
      userId: payload.user_id || payload.sub,
      email: payload.email,
    };
  } catch (error) {
    console.error('Error decoding token:', error);
    return null;
  }
};

